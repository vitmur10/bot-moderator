import config
#import logging
from aiogram import Bot, Dispatcher, executor, types
from filters import IsAdmin
from datetime import datetime, timedelta
import time


bot = Bot(token=config.Token_bot)

#logging.basicConfig(level=logging.INFO)
dp = Dispatcher(bot)


@dp.message_handler(content_types=['new_chat_members'])
async def on_user_joiner(message: types.Message):
    await message.delete()


#a–∫—Ç–∏–≤–∞—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä–∞
dp.filters_factory.bind(IsAdmin)


#ban
@dp.message_handler(is_admin=True, commands=['ban'], commands_prefix='/')
async def ban(message: types.Message):
    if not message.reply_to_message:
        await message.reply('–¶—è –∫–æ–º–∞–Ω–¥–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
        return


    await message.bot.ban_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    await message.reply(f'–ü–æ–∫–∏–Ω—É–≤ –Ω–∞—Å')


#kik
@dp.message_handler(is_admin=True, commands=['kik'], commands_prefix='/')
async def kik(message: types.Message):
    if not message.reply_to_message:
        await message.reply('–¶—è –∫–æ–º–∞–Ω–¥–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
        return

    await message.bot.unban_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    await message.reply(f'–ü–æ–∫–∏–Ω—É–≤ –Ω–∞—Å')


#Mute
@dp.message_handler(is_admin=True, commands=['mut'], commands_prefix='/')
async def mute(message):
    name1 = message.from_user.get_mention(as_html=True)
    if not message.reply_to_message:
        await message.reply("–¶—è –∫–æ–º–∞–Ω–¥–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")
        return
    try:
        muteint = int(message.text.split()[1])
        mutetype = message.text.split()[2]
        comment = " ".join(message.text.split()[3:])
    except IndexError:
        await message.reply('–ë—Ä–∞–∫—É—î –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤!\n–ü—Ä–∏–∫–ª–∞–¥:\n`/mut 1 —á –ø—Ä–∏—á–∏–Ω–∞`')
        return
    if mutetype == "–≥" or mutetype == "–≥–æ–¥–∏–Ω" or mutetype == "–≥–æ–¥–∏–Ω–∞":
        dt = datetime.now() + timedelta(hours=muteint)
        timestamp = dt.timestamp()
    elif mutetype == "—Ö" or mutetype == "—Ö–≤–∏–ª–∏–Ω" or mutetype == "—Ö–≤–∏–ª–∏–Ω–∏":
        dt = datetime.now() + timedelta(minutes=muteint)
        timestamp = dt.timestamp()
    elif mutetype == "–¥" or mutetype == "–¥–Ω—ñ–≤" or mutetype == "–¥–µ–Ω—å":
        dt = datetime.now() + timedelta(days=muteint)
        timestamp = dt.timestamp()
    await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False),timestamp)
    await message.reply(
        f' | <b>–†—ñ—à–µ–Ω–Ω—è –±—É–ª–æ –ø—Ä–∏–π–Ω—è—Ç–µ:</b> {name1}\n | <b>–ü–æ—Ä—É—à–Ω–∏–∫:</b> <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\n‚è∞ | <b>–¢–µ—Ä–º—ñ–Ω –ø–æ–∫–∞—Ä–∞–Ω–Ω—è:</b> {muteint} {mutetype}\n | <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {comment}',
        parse_mode='html')


@dp.message_handler()
async def filter_messages(message: types.Message):
    m2 = set(str.casefold(message.text))
    characters = {
        'z': '–í–∏–π–¥–∏ –æ—Ç—Å—é–¥–∞ —Ä–æ–∑–±—ñ–π–Ω–∏–∫üßèüßèüßè',
        'v': '–ü–∏–∑–¥—É–π—Ç–µ –Ω–∞—Ö—É–π –æ—Ç—Å—é–¥–∞ –π–æ–±–∞–Ω–∏—î –ø—ñ–¥–∞—Ä–∞—Å–∏üë®‚Äçü¶≤üë®‚Äçü¶≤üë®‚Äçü¶≤',
        'vz': '–ü–∏–∑–¥–µ—Ü—å —Ä–æ—Å—ñ–π—Å—å–∫—ñ–π —Ñ–µ–¥–µ—Ä–∞—Ü—ñ—ó‚ö∞Ô∏è‚ö∞Ô∏è‚ö∞Ô∏è'
    }
    for key in characters:
        if set(key) == m2:
            await message.reply(
                characters[key])


if __name__ =='__main__':
    executor.start_polling(dp, skip_updates=True)
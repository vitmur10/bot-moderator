import config
from aiogram import Bot, Dispatcher, executor, types
from filters import IsAdmin
from datetime import datetime, timedelta
import random

bot = Bot(token=config.Token_bot)
owm = config.owm
# logging.basicConfig(level=logging.INFO)
dp = Dispatcher(bot)


@dp.message_handler(content_types=['new_chat_members'])
async def on_user_joiner(message: types.Message):
    await message.delete()


# a–∫—Ç–∏–≤–∞—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä–∞
dp.filters_factory.bind(IsAdmin)


# ban
@dp.message_handler(is_admin=True, commands=['ban'], commands_prefix='/')
async def ban(message: types.Message):
    if not message.reply_to_message:
        await message.reply('–¶—è –∫–æ–º–∞–Ω–¥–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
        return

    await message.bot.ban_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    await message.reply(f'–ü–æ–∫–∏–Ω—É–≤ –Ω–∞—Å')


# kik
@dp.message_handler(is_admin=True, content_types=["—Ä–µ–∫–ª–∞–º–∞", "–ø—Ä–æ–Ω", "—è–∑—ã–∫"])
async def kik(message: types.Message):
        if not message.reply_to_message:
            await message.reply('–¶—è –∫–æ–º–∞–Ω–¥–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return
        await message.bot.unban_chat_member(message.chat.id, message.reply_to_message.from_user.id)
        await message.reply(f'–ü–æ–∫–∏–Ω—É–≤ –Ω–∞—Å', message.reply_to_message.from_user.id)


# Mute
@dp.message_handler(is_admin=True, content_types=['text'])
async def mute(message):
    name1 = message.from_user.get_mention(as_html=True)
    muteint = {"—Ñ–ª—É–¥": 6,
               "–Ω–∞–∫—Ä—É—Ç–∫–∞": 12,
               "—ç–ø–∏": 48,
               "–ø–∏–Ω–≥": 2,
               "–ø–æ–ø—Ä–æ—à–∞–π–∫–∞": 24
               }
    if not message.reply_to_message:
        await message.reply("–¶—è –∫–æ–º–∞–Ω–¥–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")
        return
    for key in muteint:
        if key == message.text:
            dt = datetime.now() + timedelta(hours=int(muteint[key]))
            timestamp: float = dt.timestamp()
            await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), timestamp)
            await message.reply(
                f' | <b>–†—ñ—à–µ–Ω–Ω—è –±—É–ª–æ –ø—Ä–∏–π–Ω—è—Ç–µ:</b> {name1}\n | <b>–ü–æ—Ä—É—à–Ω–∏–∫:</b> <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\n‚è∞ | <b>–¢–µ—Ä–º—ñ–Ω –ø–æ–∫–∞—Ä–∞–Ω–Ω—è:</b> {muteint[key]} –≥–æ–¥–∏–Ω\n | <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {message.text}',
                parse_mode='html')


@dp.message_handler(content_types=['text'])
async def filter_messages(message: types.Message):
    a = ['–í—ñ–¥–ø–æ—á–∏–Ω—å', '–í—Å–µ –±—É–¥–µ –¥–æ–±—Ä–µ']
    b = ['–£ —Ç–µ–±–µ –¥—É–∂–µ –≥–∞—Ä–Ω–∞ –ø–æ—Å–º—ñ—à–∫–∞', '–ù–µ –¥—É–º–∞–π –ø—Ä–æ –ø–æ–≥–∞–Ω–µ', '–í—Å–µ –±—É–¥–µ –¥–æ–±—Ä–µ']
    c = ['–£ —Ç–µ–±–µ –≤—Å–µ –≤–∏–π–¥–µ', '–í—Å–µ –±—É–¥–µ –¥–æ–±—Ä–µ']
    characters = {
        'z': '–í–∏–π–¥–∏ –æ—Ç—Å—é–¥–∞ —Ä–æ–∑–±—ñ–π–Ω–∏–∫üßèüßèüßè',
        'v': '–ü–∏–∑–¥—É–π—Ç–µ –Ω–∞—Ö—É–π –æ—Ç—Å—é–¥–∞ –π–æ–±–∞–Ω–∏—î –ø—ñ–¥–∞—Ä–∞—Å–∏üë®‚Äçü¶≤üë®‚Äçü¶≤üë®‚Äçü¶≤',
        'vz': '–ü–∏–∑–¥–µ—Ü—å —Ä–æ—Å—ñ–π—Å—å–∫—ñ–π —Ñ–µ–¥–µ—Ä–∞—Ü—ñ—ó‚ö∞Ô∏è‚ö∞Ô∏è‚ö∞Ô∏è',
        '–Ø –≤—Ç–æ–º–∏–≤—Å—è': a[random.randrange(0, len(a))],
        '–ú–µ–Ω—ñ —Å—É–º–Ω–æ': b[random.randrange(0, len(b))],
        '–Ø –±—ñ–ª—å—à–µ –Ω–µ –º–æ–∂—É': c[random.randrange(0, len(c))],
        '–Ø –≤—Ç–æ–º–∏–ª–∞—Å—è': a[random.randrange(0, len(a))]
    }
    for key in characters:
        if key == message.text:
            await message.reply(
                characters[key])
        elif set(key) == set(message.text.lower()):
            await message.reply(
                characters[key])


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply('–ü—Ä–∏–≤—ñ—Ç')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
